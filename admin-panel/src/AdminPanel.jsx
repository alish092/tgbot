import React, { useEffect, useState } from 'react';
import axios from 'axios';
import SynonymManager from './SynonymManager';
import PriorityManager from './PriorityManager';
import UserManager from './UserManager';
import Pagination from './Pagination';
import StatsDashboard from './StatsDashboard';



function AdminPanel() {
  const [activeTab, setActiveTab] = useState('logs');
  const [logs, setLogs] = useState([]);
  const [totalLogs, setTotalLogs] = useState(0); // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const [page, setPage] = useState(1);            // –°—Ç—Ä–∞–Ω–∏—Ü–∞
  const [limit, setLimit] = useState(20);         // –õ–∏–º–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const [complaints, setComplaints] = useState([]);
  const [overrides, setOverrides] = useState([]);
  const [search, setSearch] = useState('');
  const [synonyms, setSynonyms] = useState([]);
  const [priorities, setPriorities] = useState([]);
  const [newOverrideQuestion, setNewOverrideQuestion] = useState('');
  const [newOverrideAnswer, setNewOverrideAnswer] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [editingOverride, setEditingOverride] = useState(null);
  const [editQuestion, setEditQuestion] = useState('');
  const [editAnswer, setEditAnswer] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(20);
  const [totalItems, setTotalItems] = useState(0);
  const [totalPages, setTotalPages] = useState(0);
  const [selectedComplaint, setSelectedComplaint] = useState(null);
  const [manualResponse, setManualResponse] = useState('');
  const [processingComplaint, setProcessingComplaint] = useState(false)
  const [usernameFilter, setUsernameFilter] = useState('');
  const [questionFilter, setQuestionFilter] = useState('');
  const [answerFilter, setAnswerFilter] = useState('');
  const cancelManualResponse = () => {
  setSelectedComplaint(null);
  setManualResponse('');
};

  const fetchOverrides = async () => {
  console.log("üì° –ü–æ–ª—É—á–∞–µ–º overrides...");
  const res = await axios.get('http://localhost:8000/overrides');
  console.log("üì¶ –ü–æ–ª—É—á–µ–Ω—ã overrides:", res.data);
  setOverrides(res.data);
};

  const handleComplaintResponse = (complaint) => {
  setSelectedComplaint(complaint);
  setManualResponse(complaint.answer || ''); // –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–∏–º –æ—Ç–≤–µ—Ç–æ–º
};

  const addOverride = async () => {
     console.log("üß™ –ó–∞–ø—É—Å–∫ addOverride...");

  setLoading(true);
  try {
    console.log("üî• –ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å override...");
    console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:", newOverrideQuestion, newOverrideAnswer);

    const response = await axios.post("http://localhost:8000/overrides", null, {
      params: {
        question: newOverrideQuestion,
        answer: newOverrideAnswer
      }
    });

    console.log("‚úÖ Override –¥–æ–±–∞–≤–ª–µ–Ω:", response.data);
    setNewOverrideQuestion('');
    setNewOverrideAnswer('');
    await fetchOverrides();
    setActiveTab('overrides');

  } catch (error) {

    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ override:", error.response?.data || error.message);
    setError("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä—É—á–Ω–æ–π –æ—Ç–≤–µ—Ç: " + (error.response?.data?.detail || error.message));
  } finally {
    setLoading(false);
  }
};

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä—É—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∂–∞–ª–æ–±—É
  const sendManualResponse = async () => {
  if (!selectedComplaint || !manualResponse.trim()) return;

  setProcessingComplaint(true);
  setError(null);

  try {
    const complaintId = Number(selectedComplaint.id);
    if (!Number.isInteger(complaintId) || complaintId <= 0) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∂–∞–ª–æ–±—ã');
    }

    const response = await axios.post(
      `http://localhost:8000/complaints/${complaintId}/override`,
      { manual_response: manualResponse }
    );

    if (response.data && response.data.success) {
      fetchComplaints();
      setSelectedComplaint(null);
      setManualResponse('');
      alert('–†—É—á–Ω–æ–π –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
    } else {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä—É—á–Ω–æ–π –æ—Ç–≤–µ—Ç: ' + (response.data?.detail || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä—É—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:', error);
    setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä—É—á–Ω–æ–π –æ—Ç–≤–µ—Ç: ' + (error.response?.data?.detail || error.message));
  } finally {
    setProcessingComplaint(false);
  }
};

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è override
  const deleteOverride = async (id) => {
    try {
      await axios.delete(`http://localhost:8000/overrides/${id}`);
      fetchOverrides();
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ override:", e);
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä—É—á–Ω–æ–π –æ—Ç–≤–µ—Ç");
    }
  };
  const startEditOverride = (override) => {
    setEditingOverride(override);
    setEditQuestion(override.question);
    setEditAnswer(override.answer);
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ override –∏–∑ –∂–∞–ª–æ–±—ã
  const createOverrideFromComplaint = (c) => {
  // –ø—Ä–µ—Ñ–∏–ª–ª —Ñ–æ—Ä–º—ã –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∫–ª–∞–¥–∫—É
  setNewOverrideQuestion(c.question);
  setNewOverrideAnswer(c.answer || "");
  setActiveTab("overrides");
};
  const saveEditedOverride = async () => {
  try {
    await axios.put(`http://localhost:8000/overrides/${editingOverride.id}`, null, {
      params: {
        question: editQuestion,
        answer: editAnswer,
      }
    });
    setEditingOverride(null);
    fetchOverrides();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π:', error);
    setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è');
    }
  };


const fetchLogs = async () => {
  try {
    setLoading(true);
    const res = await axios.get('http://localhost:8000/logs', {
      params: {
        page,
        limit,
        search,
        username: usernameFilter,
        question: questionFilter,
        answer: answerFilter
      }
    });
    setLogs(res.data.items);
    setTotalLogs(res.data.total);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤:', error);
    setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤');
  } finally {
    setLoading(false);
  }
};


  const fetchComplaints = () =>
  axios.get('http://localhost:8000/complaints')
    .then(res => {
      console.log('–î–∞–Ω–Ω—ã–µ –∂–∞–ª–æ–±:', res.data); // –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - —ç—Ç–æ –º–∞—Å—Å–∏–≤
      if (Array.isArray(res.data)) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const validComplaints = res.data.map(complaint => ({
          id: complaint.id || 0,
          username: complaint.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          question: complaint.question || '–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–∞',
          answer: complaint.answer || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞',
          status: complaint.status || 'PENDING',
          complaint: complaint.complaint || '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∂–∞–ª–æ–±—ã'
        }));
        setComplaints(validComplaints);
      } else {
        console.error('–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', res.data);
        setComplaints([]); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      }
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∂–∞–ª–æ–±:', error);
      setComplaints([]); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    });



  const fetchSynonyms = () =>
    axios.get('http://localhost:8000/synonyms_from_db').then(res => setSynonyms(res.data));

  const fetchPriorities = () =>
    axios.get('http://localhost:8000/priorities').then(res => setPriorities(res.data));

  const handlePageChange = (page) => {
  setCurrentPage(page);
  fetchLogs(page, pageSize, filter);
};
  const exportData = (format) => {
  // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ API –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
  const exportUrl = `http://localhost:8000/logs/export?format=${format}&search=${search}`;

  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –∏ —ç–º—É–ª–∏—Ä—É–µ–º –∫–ª–∏–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
  const link = document.createElement('a');
  link.href = exportUrl;
  link.target = '_blank';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};
  useEffect(() => {
  const fetchAllData = async () => {
    try {
      setLoading(true);
      await fetchLogs();
      await fetchComplaints();
      await fetchOverrides();
      await fetchSynonyms();
      await fetchPriorities();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ");
    } finally {
      setLoading(false);
    }
  };

  fetchAllData();
}, [activeTab, page, limit, search, usernameFilter, questionFilter, answerFilter]); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  useEffect(() => {
  if (activeTab === 'complaints') {
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∂–∞–ª–æ–± –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏');
    fetchComplaints();
  }
}, [activeTab]);

  const renderLogs = () => {
    if (!logs || !Array.isArray(logs)) {
            console.log("üü¢ –≠–¢–û –ò–ú–ï–ù–ù–û –ú–û–ô –ö–û–î");
      return <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>;
    }

    return (
        <div>
          <h2>üìÑ –õ–æ–≥–∏</h2>

          {/* –§–æ—Ä–º–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ */}
          <div style={{ marginBottom: '20px', padding: '15px', backgroundColor: '#f9f9f9', borderRadius: '5px' }}>
            <h3>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤</h3>
            <div style={{ display: 'flex', gap: '10px', marginBottom: '10px' }}>
              <input
                type="text"
                placeholder="–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
                value={usernameFilter}
                onChange={(e) => setUsernameFilter(e.target.value)}
                style={{ padding: '8px', width: '33%' }}
              />
              <input
                type="text"
                placeholder="–§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–ø—Ä–æ—Å—É"
                value={questionFilter}
                onChange={(e) => setQuestionFilter(e.target.value)}
                style={{ padding: '8px', width: '33%' }}
              />
              <input
                type="text"
                placeholder="–§–∏–ª—å—Ç—Ä –ø–æ –æ—Ç–≤–µ—Ç—É"
                value={answerFilter}
                onChange={(e) => setAnswerFilter(e.target.value)}
                style={{ padding: '8px', width: '33%' }}
              />
            </div>
            <button
              onClick={fetchLogs}
              style={{ padding: '8px 15px', backgroundColor: '#4CAF50', color: 'white', border: 'none', cursor: 'pointer', marginRight: '10px' }}
            >
              –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            </button>
            <button
              onClick={() => {
                setUsernameFilter('');
                setQuestionFilter('');
                setAnswerFilter('');
                // –°–±—Ä–æ—Å–∏–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Ç–æ–∂–µ
                setSearch('');
                fetchLogs();
              }}
              style={{ padding: '8px 15px', backgroundColor: '#f44336', color: 'white', border: 'none', cursor: 'pointer' }}
            >
              –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            </button>
          </div>

          {loading ? (
              <p>–ò–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞...</p>
          ) : (
              <table style={{width: '100%', borderCollapse: 'collapse', marginTop: '10px'}}>
                <thead>
                <tr style={{backgroundColor: '#f2f2f2'}}>
                  <th>ID</th>
                  <th>Username</th>
                  <th>Question</th>
                  <th>Answer</th>
                </tr>
                </thead>
                <tbody>
                {logs.length > 0 ? (
                    logs.map((log) => (
                        <tr key={log.id}>
                          <td>{log.id}</td>
                          <td>{log.username}</td>
                          <td>{log.question}</td>
                          <td>{log.answer}</td>
                        </tr>
                    ))
                ) : (
                    <tr>
                      <td colSpan="4" style={{textAlign: 'center'}}>
                        –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                      </td>
                    </tr>
                )}
                </tbody>
              </table>
          )}
        </div>
    );
  };


  const renderComplaints = () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ complaints —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
  const complaintsArray = Array.isArray(complaints) ? complaints : [];

  return (
    <div>
      <h2>üö´ –ñ–∞–ª–æ–±—ã</h2>

      {/* –§–æ—Ä–º–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∂–∞–ª–æ–±—É */}
      {selectedComplaint && (
        <div style={{ marginBottom: '20px', padding: '15px', backgroundColor: '#f0f8ff', borderRadius: '5px', border: '1px solid #c0d6e4' }}>
          <h3>–†—É—á–Ω–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –∂–∞–ª–æ–±—É</h3>

          <div style={{ marginBottom: '15px' }}>
            <p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {selectedComplaint.username}</p>
            <p><strong>–í–æ–ø—Ä–æ—Å:</strong> {selectedComplaint.question}</p>
            <p><strong>–¢–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç:</strong> {selectedComplaint.answer}</p>
          </div>

          <div style={{ marginBottom: '15px' }}>
            <label htmlFor="manualResponse" style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>–í–∞—à –æ—Ç–≤–µ—Ç:</label>
            <textarea
              id="manualResponse"
              value={manualResponse}
              onChange={(e) => setManualResponse(e.target.value)}
              style={{ width: '100%', padding: '8px', minHeight: '120px', borderRadius: '4px', border: '1px solid #ccc' }}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é..."
            />
          </div>

          {error && <div style={{ color: 'red', marginBottom: '10px' }}>{error}</div>}

          <div>
            <button
              onClick={sendManualResponse}
              disabled={processingComplaint || !manualResponse.trim()}
              style={{
                padding: '8px 15px',
                backgroundColor: '#4CAF50',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: processingComplaint || !manualResponse.trim() ? 'not-allowed' : 'pointer',
                marginRight: '10px',
                opacity: processingComplaint || !manualResponse.trim() ? 0.7 : 1
              }}
            >
              {processingComplaint ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç'}
            </button>

            <button
              onClick={cancelManualResponse}
              style={{
                padding: '8px 15px',
                backgroundColor: '#f44336',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer'
              }}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        </div>
      )}

      {complaintsArray.length === 0 ? (
        <p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–∞–ª–æ–±</p>
      ) : (
        <table style={{ width: '100%', borderCollapse: 'collapse', marginTop: '10px' }}>
          <thead>
            <tr style={{ backgroundColor: '#f2f2f2' }}>
              <th style={{ padding: '8px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>ID</th>
              <th style={{ padding: '8px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
              <th style={{ padding: '8px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>–í–æ–ø—Ä–æ—Å</th>
              <th style={{ padding: '8px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>–û—Ç–≤–µ—Ç</th>
              <th style={{ padding: '8px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>–°—Ç–∞—Ç—É—Å</th>
              <th style={{ padding: '8px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody>
            {complaintsArray.map((c) => (
              <tr key={c.id} style={{ borderBottom: '1px solid #ddd' }}>
                <td style={{ padding: '8px' }}>{c.id}</td>
                <td style={{ padding: '8px' }}>{c.username}</td>
                <td style={{ padding: '8px' }}>{c.question}</td>
                <td style={{ padding: '8px' }}>{c.answer}</td>
                <td style={{ padding: '8px' }}>
  <span style={{
    display: 'inline-block',
    padding: '4px 8px',
    borderRadius: '4px',
    backgroundColor:
      c.status === 'RESOLVED' ? '#8bc34a' :
      c.status === 'REJECTED' ? '#ff9800' :
      '#f44336',
    color: 'white',
    fontSize: '12px',
    fontWeight: 'bold'
  }}>
    {c.status === 'RESOLVED' ? '–†–µ—à–µ–Ω–æ' :
     c.status === 'REJECTED' ? '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ' :
     '–û–∂–∏–¥–∞–µ—Ç'}
  </span>
</td>
                <td style={{ padding: '8px' }}>
                  {c.status === 'PENDING' && (
                    <button
                      onClick={() => handleComplaintResponse(c)}
                      style={{
                        padding: '5px 10px',
                        backgroundColor: '#2196F3',
                        color: 'white',
                        border: 'none',
                        borderRadius: '4px',
                        cursor: 'pointer',
                        marginRight: '5px'
                      }}
                    >
                      –û—Ç–≤–µ—Ç–∏—Ç—å
                    </button>
                  )}
                  <button
                    onClick={() => createOverrideFromComplaint(c)}
                    style={{
                      padding: '5px 10px',
                      backgroundColor: '#4CAF50',
                      color: 'white',
                      border: 'none',
                      borderRadius: '4px',
                      cursor: 'pointer'
                    }}
                  >
                    –í —Ä—É—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};



  const renderOverrides = () => (
  <div>
    <h2>‚úçÔ∏è –†—É—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã</h2>

    {error && <div style={{ color: 'red', marginBottom: '10px' }}>{error}</div>}

    {/* –ë–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ */}
    <div style={{ marginBottom: '20px', padding: '15px', backgroundColor: '#f9f9f9', borderRadius: '5px' }}>
      <h3>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä—É—á–Ω–æ–π –æ—Ç–≤–µ—Ç</h3>
      <div style={{ marginBottom: '10px' }}>
        <input
          type="text"
          placeholder="–í–æ–ø—Ä–æ—Å"
          value={newOverrideQuestion}
          onChange={(e) => setNewOverrideQuestion(e.target.value)}
          style={{ width: '100%', padding: '8px', marginBottom: '5px' }}
        />
      </div>
      <div style={{ marginBottom: '10px' }}>
        <textarea
          placeholder="–û—Ç–≤–µ—Ç"
          value={newOverrideAnswer}
          onChange={(e) => setNewOverrideAnswer(e.target.value)}
          style={{ width: '100%', padding: '8px', height: '100px' }}
        />
      </div>
      <button
        onClick={addOverride}
        disabled={loading || !newOverrideQuestion.trim() || !newOverrideAnswer.trim()}
        style={{ padding: '8px 15px', backgroundColor: '#4CAF50', color: 'white', border: 'none', cursor: 'pointer' }}
      >
        {loading ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å —Ä—É—á–Ω–æ–π –æ—Ç–≤–µ—Ç'}
      </button>
    </div>

    {/* –ë–ª–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ */}
    {editingOverride && (
      <div style={{ marginBottom: '20px', padding: '15px', backgroundColor: '#e8f0fe', borderRadius: '5px' }}>
        <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä—É—á–Ω–æ–π –æ—Ç–≤–µ—Ç</h3>
        <div style={{ marginBottom: '10px' }}>
          <input
            type="text"
            placeholder="–í–æ–ø—Ä–æ—Å"
            value={editQuestion}
            onChange={(e) => setEditQuestion(e.target.value)}
            style={{ width: '100%', padding: '8px', marginBottom: '5px' }}
          />
        </div>
        <div style={{ marginBottom: '10px' }}>
          <textarea
            placeholder="–û—Ç–≤–µ—Ç"
            value={editAnswer}
            onChange={(e) => setEditAnswer(e.target.value)}
            style={{ width: '100%', padding: '8px', height: '100px' }}
          />
        </div>
        <button
          onClick={saveEditedOverride}
          style={{ padding: '8px 15px', backgroundColor: '#4CAF50', color: 'white', border: 'none', cursor: 'pointer', marginRight: '10px' }}
        >
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        </button>
        <button
          onClick={() => setEditingOverride(null)}
          style={{ padding: '8px 15px', backgroundColor: '#f44336', color: 'white', border: 'none', cursor: 'pointer' }}
        >
          –û—Ç–º–µ–Ω–∞
        </button>
      </div>
    )}

    {/* –¢–∞–±–ª–∏—Ü–∞ —Ä—É—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ */}
    <table style={{ width: '100%', borderCollapse: 'collapse' }}>
      <thead>
        <tr style={{ backgroundColor: '#f2f2f2' }}>
          <th style={{ padding: '8px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>ID</th>
          <th style={{ padding: '8px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>–í–æ–ø—Ä–æ—Å</th>
          <th style={{ padding: '8px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>–û—Ç–≤–µ—Ç</th>
          <th style={{ padding: '8px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>–î–µ–π—Å—Ç–≤–∏—è</th>
        </tr>
      </thead>
      <tbody>
        {overrides.map((o) => (
          <tr key={o.id} style={{ borderBottom: '1px solid #ddd' }}>
            <td style={{ padding: '8px' }}>{o.id}</td>
            <td style={{ padding: '8px' }}>{o.question}</td>
            <td style={{ padding: '8px' }}>{o.answer}</td>
            <td style={{ padding: '8px' }}>
              <button
                onClick={() => startEditOverride(o)}
                style={{ marginRight: '10px', padding: '5px 10px', backgroundColor: '#2196F3', color: 'white', border: 'none', cursor: 'pointer' }}
              >
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </button>
              <button
                onClick={() => deleteOverride(o.id)}
                style={{ padding: '5px 10px', backgroundColor: '#f44336', color: 'white', border: 'none', cursor: 'pointer' }}
              >
                –£–¥–∞–ª–∏—Ç—å
              </button>
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  </div>
);


;
  return (
    <div style={{ paddingTop: '20px', maxWidth: '1200px', margin: '0 auto' }}>
      <h1>‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h1>
      <div style={{ marginBottom: '20px' }}>
        <button
          onClick={() => setActiveTab('logs')}
          style={{
            padding: '8px 15px',
            backgroundColor: activeTab === 'logs' ? '#2196F3' : '#e0e0e0',
            color: activeTab === 'logs' ? 'white' : 'black',
            border: 'none',
            margin: '0 5px 5px 0',
            cursor: 'pointer'
          }}
        >
          üìÑ –õ–æ–≥–∏
        </button>
        <button
          onClick={() => setActiveTab('complaints')}
          style={{
            padding: '8px 15px',
            backgroundColor: activeTab === 'complaints' ? '#2196F3' : '#e0e0e0',
            color: activeTab === 'complaints' ? 'white' : 'black',
            border: 'none',
            margin: '0 5px 5px 0',
            cursor: 'pointer'
          }}
        >
          üö´ –ñ–∞–ª–æ–±—ã
        </button>
        <button
          onClick={() => setActiveTab('overrides')}
          style={{
            padding: '8px 15px',
            backgroundColor: activeTab === 'overrides' ? '#2196F3' : '#e0e0e0',
            color: activeTab === 'overrides' ? 'white' : 'black',
            border: 'none',
            margin: '0 5px 5px 0',
            cursor: 'pointer'
          }}
        >
          ‚úçÔ∏è –†—É—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        </button>
        <button
          onClick={() => setActiveTab('synonyms')}
          style={{
            padding: '8px 15px',
            backgroundColor: activeTab === 'synonyms' ? '#2196F3' : '#e0e0e0',
            color: activeTab === 'synonyms' ? 'white' : 'black',
            border: 'none',
            margin: '0 5px 5px 0',
            cursor: 'pointer'
          }}
        >
          –°–∏–Ω–æ–Ω–∏–º—ã
        </button>
        <button
          onClick={() => setActiveTab('priorities')}
          style={{
            padding: '8px 15px',
            backgroundColor: activeTab === 'priorities' ? '#2196F3' : '#e0e0e0',
            color: activeTab === 'priorities' ? 'white' : 'black',
            border: 'none',
            margin: '0 5px 5px 0',
            cursor: 'pointer'
          }}
        >
          –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
        </button>
        <button
          onClick={() => setActiveTab('training')}
          style={{
            padding: '8px 15px',
            backgroundColor: activeTab === 'training' ? '#2196F3' : '#e0e0e0',
            color: activeTab === 'training' ? 'white' : 'black',
            border: 'none',
            margin: '0 5px 5px 0',
            cursor: 'pointer'
          }}
        >
          üìö –û–±—É—á–µ–Ω–∏–µ
        </button>
        <button
            onClick={() => setActiveTab('users')}
            style={{
                padding: '8px 15px',
                backgroundColor: activeTab === 'users' ? '#2196F3' : '#e0e0e0',
                color: activeTab === 'users' ? 'white' : 'black',
                border: 'none',
                margin: '0 5px 5px 0',
                cursor: 'pointer'
         }}
>
  üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
</button>
<button
  onClick={() => setActiveTab('stats')}
  style={{
    padding: '8px 15px',
    backgroundColor: activeTab === 'stats' ? '#2196F3' : '#e0e0e0',
    color: activeTab === 'stats' ? 'white' : 'black',
    border: 'none',
    margin: '0 5px 5px 0',
    cursor: 'pointer'
  }}
>
  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
</button>
      </div>

      {activeTab === 'logs' && renderLogs()}
      {activeTab === 'complaints' && renderComplaints()}
      {activeTab === 'overrides' && renderOverrides()}
      {activeTab === 'synonyms' && <SynonymManager />}
      {activeTab === 'stats' && <StatsDashboard />}
      {activeTab === 'priorities' && <PriorityManager />}
      {activeTab === 'training' && (
        <div>
          <h2>üîÅ –°–∏–Ω–æ–Ω–∏–º—ã</h2>
          <ul>
            {Object.entries(
              synonyms.reduce((acc, { keyword, synonym }) => {
                acc[keyword] = [...(acc[keyword] || []), synonym];
                return acc;
              }, {})
            ).map(([keyword, syns]) => (
              <li key={keyword}>
                <b>{keyword}</b>: {syns.join(', ')}
              </li>
            ))}
          </ul>

          <h2>üìå –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã</h2>
          <ul>
            {priorities.map((p, i) => (
              <li key={i}>
                <b>{p.keyword}</b>: {p.document_name}
              </li>
            ))}
          </ul>
        </div>

      )}
      {activeTab === 'users' && <UserManager />}


    </div>
  );
}

export default AdminPanel;