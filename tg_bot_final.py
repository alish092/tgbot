import os
import json
import subprocess
import re
import logging
import docx2txt
import tiktoken
import httpx
import unicodedata
import threading
import asyncio
import time
import functools
from collections import defaultdict
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Any, Optional, Set
import pickle
import hashlib
from pymorphy2 import MorphAnalyzer

global synonyms_from_db

BACKEND_URL = os.environ.get("BACKEND_URL", "http://backend:8000")
from langchain_community.chat_models import ChatOpenAI
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters
from tqdm import tqdm
from telegram.ext import CommandHandler
from telegram.ext import CallbackQueryHandler
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
morph = MorphAnalyzer()

def normalize(text: str) -> List[str]:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å–ª–æ–≤–∞ –¥–æ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã"""
    return [morph.parse(word)[0].normal_form for word in re.findall(r'\b\w+\b', text.lower())]
# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    exit(1)
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    print("‚ùå –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: set OPENAI_API_KEY=–≤–∞—à_–∫–ª—é—á (Windows) –∏–ª–∏")
    print("export OPENAI_API_KEY=–≤–∞—à_–∫–ª—é—á (Linux/Mac)")
    exit(1)  # –í—ã—Ö–æ–¥–∏–º —Å –æ—à–∏–±–∫–æ–π, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
with open("law_keywords.json", "r", encoding="utf-8") as f:
    LAW_KEYWORDS = json.load(f)
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–∞ –¥–ª—è langchain
os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY

ADMIN_IDS = [339948299]
allowed_users = {}  # user_id -> role
DOCS_FOLDER = "docs"
MAX_TOKENS_PER_BLOCK = 2000
docs = []
CP_FOLDER = r"\\srv-2\–æ–±–º–µ–Ω\–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂\–ù–∞–ª–∏—á–∏–µ 2023_–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ 2024"
CRM_KEYWORDS = {"—Å—Ä–º", "crm", "–∞–≤—Ç–æ–¥–∏–ª–µ—Ä", "—Å—Ä–º–∫–∞"}
CRM_DOCUMENTS = {
    unicodedata.normalize('NFKD', "Porsche –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º–æ–π –ê–≤—Ç–æ–¥–∏–ª–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.docx").lower().strip(),
    unicodedata.normalize('NFKD', "Porsche –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º–æ–π –ê–≤—Ç–æ–¥–∏–ª–µ—Ä —Ä–æ–ø.docx").lower().strip(),
    unicodedata.normalize('NFKD', "Porsche –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º–æ–π –ê–≤—Ç–æ–¥–∏–ª–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂.docx").lower().strip()
}

with open('law_keywords.json', 'r', encoding='utf-8') as f:
    LAW_KEYWORDS = json.load(f)
# === –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –ò –ö–ê–¢–ê–õ–û–ì–ò ===
CACHE_DIR = "cache"
CACHE_LIFETIME = 3600  # –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1 —á–∞—Å)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤
for directory in [CACHE_DIR, DOCS_FOLDER]:
    os.makedirs(directory, exist_ok=True)
    print(f"‚úÖ –ö–∞—Ç–∞–ª–æ–≥ {directory} –≥–æ—Ç–æ–≤")

# === –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï –ó–ê–ü–†–û–°–û–í ===
# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
MAX_REQUESTS_PER_MINUTE = 5
user_request_counts = defaultdict(list)  # user_id -> [timestamp1, timestamp2, ...]

# === –°–ò–°–¢–ï–ú–ê –û–ß–ï–†–ï–î–ï–ô ===
MAX_CONCURRENT_REQUESTS = 3  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
api_semaphore = asyncio.Semaphore(MAX_CONCURRENT_REQUESTS)
# –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
processing_queue = asyncio.Queue()
# –§–ª–∞–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–æ–π –≤–æ—Ä–∫–µ—Ä–æ–≤
worker_running = True

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ï–†–ê ===
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger("tg_bot")
logger.setLevel(logging.INFO)

# === –ö–û–î–û–í–ê–Ø –ë–ê–ó–ê ===
encoding = tiktoken.encoding_for_model("gpt-3.5-turbo")
synonyms_from_db = {}
priorities_from_db = {}


# === –§–£–ù–ö–¶–ò–Ø –ü–û–í–¢–û–†–ù–´–• –ü–û–ü–´–¢–û–ö ===
async def retry_async(func, max_retries=3, base_delay=1, max_delay=10):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    retries = 0
    while True:
        try:
            return await func()
        except Exception as e:
            retries += 1
            if retries > max_retries:
                logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {e}")
                raise

            delay = min(base_delay * (2 ** (retries - 1)), max_delay)
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫.")
            await asyncio.sleep(0.1)


# === –ö–≠–®–ò–†–û–í–ê–ù–ò–ï ===
def get_cache_key(func_name: str, *args, **kwargs) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –µ—ë –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
    key_parts = [func_name]
    for arg in args:
        key_parts.append(str(arg))
    for k, v in sorted(kwargs.items()):
        key_parts.append(f"{k}={v}")

    key_string = "_".join(key_parts)
    return hashlib.md5(key_string.encode()).hexdigest()


def save_cache(key: str, data: Any) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à"""
    cache_path = os.path.join(CACHE_DIR, f"{key}.pkl")
    with open(cache_path, 'wb') as f:
        pickle.dump((datetime.now(), data), f)


def load_cache(key: str) -> Optional[Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –≤–∞–ª–∏–¥–Ω—ã"""
    cache_path = os.path.join(CACHE_DIR, f"{key}.pkl")
    if not os.path.exists(cache_path):
        return None

    try:
        with open(cache_path, 'rb') as f:
            timestamp, data = pickle.load(f)
            if datetime.now() - timestamp < timedelta(seconds=CACHE_LIFETIME):
                return data
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞: {e}")
    return None


async def cached(func, *args, **kwargs):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏"""
    func_name = func.__name__
    cache_key = get_cache_key(func_name, *args, **kwargs)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cached_result = load_cache(cache_key)
    if cached_result is not None:
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫—ç—à–∞: {func_name}")
        return cached_result

    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    result = await func(*args, **kwargs)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
    save_cache(cache_key, result)
    return result


# === –ó–ê–ì–†–£–ó–ö–ê –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• ===
async def load_dynamic_data():
    global synonyms_from_db, priorities_from_db
    logger.info("üîÑ –ù–∞—á–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    #logger.info(f"üß™ –ü–æ–ª—É—á–µ–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–∑ API: {prio.text}") #–≤—Ä–µ–º–µ–Ω–Ω–æ

    async def _load_data():
        async with httpx.AsyncClient(timeout=30.0) as client:
            logger.info("üì• –ó–∞–ø—Ä–æ—Å —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∏–∑ API")
            syns = await client.get(f"{BACKEND_URL}/synonyms_from_db")
            syns.raise_for_status()
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ —Å–∏–Ω–æ–Ω–∏–º–∞—Ö, —Å—Ç–∞—Ç—É—Å: {syns.status_code}")

            synonyms = {}
            for item in syns.json():
                key = item["keyword"]
                val = item["synonym"]
                logger.info(f"üîÑ –°–∏–Ω–æ–Ω–∏–º –¥–æ–±–∞–≤–ª–µ–Ω: {key} ‚Üí {val}")

                synonyms.setdefault(key, []).append(val)
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∏–Ω–æ–Ω–∏–º–æ–≤: {len(synonyms)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")

            logger.info("üì• –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏–∑ API")
            prio = await client.get(f"{BACKEND_URL}/priorities")
            prio.raise_for_status()
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞—Ö, —Å—Ç–∞—Ç—É—Å: {prio.status_code}")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            priorities = {p["keyword"]: p["document_name"] for p in prio.json()}
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤: {len(priorities)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")

            # üöÄ –î–û–ë–ê–í–õ–Ø–ï–ú –ñ–Å–°–¢–ö–ò–ï –ü–†–ò–û–†–ò–¢–ï–¢–´ –¥–ª—è CRM
            for word in CRM_KEYWORDS:
                priorities[word] = CRM_DOCUMENTS

            logger.info(f"üìå –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–ª—è CRM: {CRM_DOCUMENTS}")
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤: {len(priorities)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
            return synonyms, priorities

    try:
        synonyms, priorities = await cached(_load_data)
        synonyms_from_db = synonyms
        priorities_from_db = priorities

        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤: {len(priorities_from_db)}") #–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        for keyword, doc_name in priorities_from_db.items(): #–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info(f"üîë –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: '{keyword}' ‚Üí '{doc_name}'") #–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    except Exception as e:
        import traceback
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤: {e}")
        traceback.print_exc()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        priorities_from_db = {
            "–æ–¥–µ–∂–¥–∞": "–ö–æ–¥–µ–∫—Å –î–µ–ª–æ–≤–æ–π –≠—Ç–∏–∫–∏ Orbis Auto.docx",
            "–¥—Ä–µ—Å—Å-–∫–æ–¥": "–ö–æ–¥–µ–∫—Å –î–µ–ª–æ–≤–æ–π –≠—Ç–∏–∫–∏ Orbis Auto.docx",
            "–æ—Ç–ø—É—Å–∫": "–¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä.docx",
            "–æ—Ç–ø—É—Å–∫–Ω–æ–π": "–¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä.docx",
            "–Ω–∞–ª–æ–≥": "–î–ò-01-07 –ì–ª. –±—É—Ö–≥–∞–ª—Ç–µ—Ä –Ω–æ–≤—ã–π.docx"
        }

        synonyms_from_db = {
            "–∞—Ç–∑": ["–∞—Ç–∑", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∑–∞–ª–∞", "—Ä–µ—Å–µ–ø—à–Ω", "—Ä–µ—Å–µ–ø—à–∏–æ–Ω–∏—Å—Ç", "–ø–æ—Ä—à–µ —Ö–æ—Å—Ç", "—Ö–æ—Å—Ç"],
            "–æ—Ç—á–µ—Ç": ["–æ—Ç—á–µ—Ç", "–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å", "–æ—Ç—á—ë—Ç", "–æ—Ç—á–µ—Ç–Ω—ã–π", "–¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è", "—Å–¥–∞—á–∞ –æ—Ç—á–µ—Ç–æ–≤", "–±–∞–ª–∞–Ω—Å"],
            "–Ω–∞–ª–æ–≥": ["–Ω–∞–ª–æ–≥", "–Ω–∞–ª–æ–≥–æ–≤–∞—è", "–Ω–∞–ª–æ–≥–æ–≤—ã–π", "–Ω–∞–ª–æ–≥–æ–≤–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å", "–¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è"],
            "–≥–ª–∞–≤–±—É—Ö": ["–≥–ª–∞–≤–Ω—ã–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä", "–≥–ª. –±—É—Ö–≥–∞–ª—Ç–µ—Ä", "–±—É—Ö–≥–∞–ª—Ç–µ—Ä", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"],
            "–∑–∞–º–µ–Ω—è—Ç—å": ["–∑–∞–º–µ—â–∞–µ—Ç", "–∏—Å–ø–æ–ª–Ω—è–µ—Ç –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏", "–≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏", "–ø–æ–¥–º–µ–Ω—è–µ—Ç", "–∑–∞–º–µ–Ω—è–µ—Ç"],
            "–æ–¥–µ–∂–¥–∞": ["–æ–¥–µ–∂–¥–∞", "–¥—Ä–µ—Å—Å-–∫–æ–¥", "–≤–Ω–µ—à–Ω–∏–π –≤–∏–¥", "–¥–∂–∏–Ω—Å—ã", "—à–æ—Ä—Ç—ã", "–º–∞–π–∫–∞", "—Ñ—É—Ç–±–æ–ª–∫–∞", "—Ñ–æ—Ä–º–∞"],
        }


async def load_allowed_users():
    global allowed_users

    async def _load_users():
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.get(f"{BACKEND_URL}/roles")
            response.raise_for_status()
            users = response.json()
            if isinstance(users, list):
                return {int(u["user_id"]): u["role"] for u in users}
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {users}")
                return {}

    try:
        users = await retry_async(lambda: _load_users())
        allowed_users = users
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {list(allowed_users.keys())}")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        # –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è

async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not await check_role(user_id, "–¥–∏—Ä–µ–∫—Ç–æ—Ä"):
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    async with httpx.AsyncClient() as client:
        r = await client.get(f"{BACKEND_URL}/roles")
        data = r.json()

    if not data:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    msg = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n" + "\n".join([f"{r['user_id']} ‚Äî {r['role']}" for r in data])
    await update.message.reply_text(msg)

import time

last_update_time = 0  # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∞–Ω—Ç–∏-—Ñ–ª—É–¥–∞

class DocsChangeHandler(FileSystemEventHandler):
    def on_any_event(self, event):
        global last_update_time
        if event.src_path.endswith(".docx"):
            now = time.time()
            if now - last_update_time > 10:  # –ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                logger.info(f"üìÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {event.src_path}, –æ–±–Ω–æ–≤–ª—è–µ–º...")
                cache_key = get_cache_key("load_docs")
                cache_path = os.path.join(CACHE_DIR, f"{cache_key}.pkl")
                if os.path.exists(cache_path):
                    os.remove(cache_path)
                threading.Thread(target=lambda: asyncio.run(update_docs()), daemon=True).start()
                last_update_time = now
            else:
                pass


async def update_docs():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global docs
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    docs = await cached(lambda: asyncio.to_thread(load_docs))


def start_watchdog():
    """–ó–∞–ø—É—Å–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"""
    print("üìÑ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è...")
    try:
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –±–µ–∑ watchdog
        print("   –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        global docs
        docs = load_docs()  # –°–∫–∞–Ω–∏—Ä—É–µ–º –æ–¥–∏–Ω —Ä–∞–∑
        print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

        # –ó–∞—Ç–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
        print("   –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è...")
        handler = DocsChangeHandler()
        observer = Observer()
        observer.schedule(handler, DOCS_FOLDER, recursive=False)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        print("   –ó–∞–ø—É—Å–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ...")
        observer_thread = threading.Thread(target=observer.start, daemon=True)
        observer_thread.start()
        print("   ‚úÖ –ü–æ—Ç–æ–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –∑–∞–ø—É—â–µ–Ω")

        return True
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ start_watchdog: {e}")
        # –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–µ–∫-—Ç—Ä–µ–π—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        import traceback
        traceback.print_exc()
        return False


def load_docs():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Ä–∞–∑–±–∏–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ —á–∞–Ω–∫–∏ —á–µ—Ä–µ–∑ parse_documents.py"""
    print("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    try:
        from parse_documents import parse_and_return_chunks
        chunks = parse_and_return_chunks()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤")
        return chunks
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        return []



# === –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï –ß–ê–°–¢–û–¢–´ –ó–ê–ü–†–û–°–û–í ===
async def check_rate_limit(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    now = time.time()
    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
    user_request_counts[user_id] = [t for t in user_request_counts[user_id] if now - t < 60]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
    if len(user_request_counts[user_id]) >= MAX_REQUESTS_PER_MINUTE:
        return False

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
    user_request_counts[user_id].append(now)
    return True


# === –°–ò–°–¢–ï–ú–ê –û–ß–ï–†–ï–î–ï–ô ===
async def worker():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á"""
    global worker_running
    while worker_running:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            task_data = await asyncio.wait_for(processing_queue.get(), timeout=1.0)
            if task_data is None:
                continue

            update, context, question, user_id, username = task_data

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
            async with api_semaphore:
                await process_question(update, context, question, user_id, username)

            # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
            processing_queue.task_done()
        except asyncio.TimeoutError:
            # –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è - –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ: {e}")
            # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
            try:
                processing_queue.task_done()
            except:
                pass


async def start_workers():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏"""
    workers = []
    for _ in range(3):  # 3 –≤–æ—Ä–∫–µ—Ä–∞
        workers.append(asyncio.create_task(worker()))
    return workers


import requests

import requests
import io

async def handle_cp_request(update: Update, context: ContextTypes.DEFAULT_TYPE, cp_code: str):
    user_id = update.message.from_user.id
    role = allowed_users.get(user_id)
    logger.info("üß™ –í–ï–†–°–ò–Ø 2: –í—ã–∑–æ–≤ handle_cp_request —á–µ—Ä–µ–∑ HTTP")

    if role not in ("–ø—Ä–æ–¥–∞–≤–µ—Ü", "—Ä–æ–ø", "–¥–∏—Ä–µ–∫—Ç–æ—Ä"):
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º.")
        return

    url = f"http://10.102.71.75:8090/get_cp?code={cp_code}"
    logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –ö–ü –ø–æ –∞–¥—Ä–µ—Å—É: {url}")

    try:
        response = requests.get(url)
        response.raise_for_status()

        # –ò–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        filename = cp_code + ".pdf"
        content = io.BytesIO(response.content)

        await update.message.reply_document(
            document=content,
            filename=filename
        )
        logger.info(f"‚úÖ –ö–ü {cp_code} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    except requests.exceptions.HTTPError as e:
        if response.status_code == 404:
            await update.message.reply_text(f"‚ùå –ö–ü {cp_code} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.")
        logger.error(f"‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞: {e}")

    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")






async def check_override(question: str):
    async def _get_overrides():
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.get(f"{BACKEND_URL}/overrides")
            response.raise_for_status()
            return response.json()

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if not synonyms_from_db:
            await load_dynamic_data()

        logger.info(f"üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã: {synonyms_from_db}")

        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–Ω–∞–∫–∏
        question_lower = question.lower().replace('-', ' ').replace('?', '').replace('!', '').strip()
        question_words = question_lower.split()

        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é –∫–∞—Ä—Ç—É —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        reverse_synonyms = {}
        for key, values in synonyms_from_db.items():
            for value in values:
                if value not in reverse_synonyms:
                    reverse_synonyms[value] = []
                reverse_synonyms[value].append(key)

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"üîÑ –û–±—Ä–∞—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–∏–Ω–æ–Ω–∏–º–æ–≤: {reverse_synonyms}")

        # –ü–æ–ª—É—á–∞–µ–º —Ä—É—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        overrides = await retry_async(lambda: _get_overrides())

        for item in overrides:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            item_question = item["question"].lower().replace('-', ' ').replace('?', '').replace('!', '').strip()
            item_words = item_question.split()

            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if question_lower == item_question:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞: {question}")
                return item["answer"]

            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å —É—á–µ—Ç–æ–º —Å–∏–Ω–æ–Ω–∏–º–æ–≤
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤
            stop_words = {"–µ—Å–ª–∏", "—á—Ç–æ", "–∫–∞–∫", "–ª–∏", "–º–æ–∂–Ω–æ", "–Ω—É–∂–Ω–æ", "–∏", "–∞", "–Ω–æ", "—Ç–æ", "–ø–æ", "–Ω–∞", "–≤", "–∏–∑",
                          "–ø—Ä–∏", "–∑–∞", "–∫—Ç–æ", "–≥–¥–µ", "–∫–æ–≥–¥–∞", "–ø–æ—á–µ–º—É", "–∑–∞—á–µ–º", "–¥–æ–ª–∂–µ–Ω", "–¥–æ–ª–∂–Ω—ã", "–¥–æ–ª–∂–Ω–∞", "–º–Ω–µ",
                          "–≤–∞–º"}

            # –°—Ç—Ä–æ–∏–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è –æ–±–æ–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            semantic_set_question = set()
            semantic_set_item = set()

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for word in question_words:
                if word in stop_words:
                    continue

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–æ —Å–ª–æ–≤–æ
                semantic_set_question.add(word)

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –µ—Å–ª–∏ —ç—Ç–æ —Å–∏–Ω–æ–Ω–∏–º
                if word in reverse_synonyms:
                    for key in reverse_synonyms[word]:
                        semantic_set_question.add(key)

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã, –µ—Å–ª–∏ —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
                if word in synonyms_from_db:
                    for synonym in synonyms_from_db[word]:
                        semantic_set_question.add(synonym)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            for word in item_words:
                if word in stop_words:
                    continue

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–æ —Å–ª–æ–≤–æ
                semantic_set_item.add(word)

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –µ—Å–ª–∏ —ç—Ç–æ —Å–∏–Ω–æ–Ω–∏–º
                if word in reverse_synonyms:
                    for key in reverse_synonyms[word]:
                        semantic_set_item.add(key)

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã, –µ—Å–ª–∏ —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
                if word in synonyms_from_db:
                    for synonym in synonyms_from_db[word]:
                        semantic_set_item.add(synonym)

            # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            common_semantic = semantic_set_question.intersection(semantic_set_item)

            # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            all_semantic = semantic_set_question.union(semantic_set_item)
            if all_semantic:
                match_percent = len(common_semantic) / len(all_semantic)
            else:
                match_percent = 0

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            #logger.info(f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question_lower}")
            #logger.info(f"–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –Ω–∞–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {semantic_set_question}")
            #logger.info(f"–í–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ: {item_question}")
            #logger.info(f"–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –Ω–∞–±–æ—Ä –±–∞–∑—ã: {semantic_set_item}")
            #logger.info(f"–û–±—â–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {common_semantic}")
            #logger.info(f"–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {match_percent:.2f}")

            # –¢—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 2 –æ–±—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ 50% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if len(common_semantic) >= 2 and match_percent >= 0.5:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ö–æ—Ä–æ—à–µ–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {common_semantic}")
                return item["answer"]

            # –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π –¥–ª—è –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (2-3 —Å–ª–æ–≤–∞)
            # –ï—Å–ª–∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–ª–æ–≤ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤ —ç—Ç–∞–ª–æ–Ω–Ω–æ–º –≤–æ–ø—Ä–æ—Å–µ
            significant_question_words = [w for w in question_words if w not in stop_words]
            if len(significant_question_words) <= 3 and len(common_semantic) >= len(significant_question_words) * 0.67:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {common_semantic}")
                return item["answer"]

    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ overrides: {e}")
        import traceback
        traceback.print_exc()

    return None


async def handle_complaint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    callback_data = update.callback_query.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã callback –¥–∞–Ω–Ω—ã–µ: {callback_data}")

    _, log_id = callback_data.split(":")
    logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π log_id: {log_id}")

    await update.callback_query.answer("–ñ–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ")
    await update.callback_query.edit_message_reply_markup(reply_markup=None)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å log_id
    if log_id is None or log_id == "error" or not log_id.isdigit():
        logger.error(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π log_id: {log_id}")
        await update.effective_chat.send_message("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∂–∞–ª–æ–±—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    await update.effective_chat.send_message("–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    logger.info(f"üö® –ñ–∞–ª–æ–±–∞ –Ω–∞ –ª–æ–≥ #{log_id} - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–æ")


    async def _send_complaint():
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã –¥–ª—è log_id: {log_id}")

        async with httpx.AsyncClient(timeout=30.0) as client:
            params = {
                "log_id": int(log_id),
                "complaint": "–ñ–∞–ª–æ–±–∞ –∏–∑ Telegram"
            }
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ: {params}")

            response = await client.post(
                f"{BACKEND_URL}/complaints",
                params=params,
            )

            status_code = response.status_code
            logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {status_code}")

            response.raise_for_status()

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            response_text = response.text
            logger.info(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response_text}")

            try:
                data = response.json()
                logger.info(f"JSON –æ—Ç–≤–µ—Ç–∞: {data}")
                return data
            except Exception as json_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {str(json_error)}")
                return {}

    try:
        result = await retry_async(lambda: _send_complaint())
        logger.info(f"üö® –ñ–∞–ª–æ–±–∞ –Ω–∞ –ª–æ–≥ #{log_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã: {e}")
        await update.effective_chat.send_message("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∂–∞–ª–æ–±—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def log_interaction(user_id: int, username: str, question: str, answer: str):
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞: user_id={user_id}, username={username}")
        logger.info(f"–í–æ–ø—Ä–æ—Å: {question[:50]}...")  # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏

        async with httpx.AsyncClient(timeout=30.0) as client:
            payload = {
                "user_id": user_id,
                "username": username,
                "question": question,
                "answer": answer
            }
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ: {payload}")

            response = await client.post(
                f"{BACKEND_URL}/logs",
                json=payload,
                headers={"Content-Type": "application/json"}
            )

            status_code = response.status_code
            logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {status_code}")

            response.raise_for_status()

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            response_text = response.text
            logger.info(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response_text}")

            try:
                data = response.json()
                logger.info(f"JSON –æ—Ç–≤–µ—Ç–∞: {data}")

                if "error" in data:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏: {data['error']}")
                    return "error"
                if "id" not in data:
                    logger.error(f"ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ: {data}")
                    return "error"

                log_id = data.get("id")
                logger.info(f"–ü–æ–ª—É—á–µ–Ω log_id: {log_id}")
                return log_id
            except Exception as json_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {str(json_error)}")
                return "error"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        return "error"


async def send_answer(update, context, answer, block, log_id, filename=None):
    kb = [[InlineKeyboardButton("üö´ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"complain:{log_id}")]]
    user_id = update.message.from_user.id

    # –î–û–ë–ê–í–õ–ï–ù–û: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    MAX_MESSAGE_LENGTH = 1000

    # –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
    if user_id in ADMIN_IDS:
        source_info = f"üìÇ {filename}\n\n"
    else:
        source_info = ""

    # –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞ –∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
    if len(answer) > MAX_MESSAGE_LENGTH:
        # –î–û–ë–ê–í–õ–ï–ù–û: –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –∞–±–∑–∞—Ü—ã –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
        paragraphs = answer.split('\n')
        current_message = ""
        messages = []

        for p in paragraphs:
            # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–±–∑–∞—Ü–∞ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç
            if len(current_message + p + "\n") <= MAX_MESSAGE_LENGTH:
                current_message += p + "\n"
            else:
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
                if current_message.strip():
                    messages.append(current_message.strip())
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–≥–æ –∞–±–∑–∞—Ü–∞
                current_message = p + "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
        if current_message.strip():
            messages.append(current_message.strip())

        # –î–û–ë–ê–í–õ–ï–ù–û: –ï—Å–ª–∏ –Ω–µ—Ç –∞–±–∑–∞—Ü–µ–≤ –∏–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        if not messages or len(messages) == 1:
            messages = [answer[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(answer), MAX_MESSAGE_LENGTH)]

        total_parts = len(messages)
        logger.info(f"–û—Ç–≤–µ—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ {total_parts} —á–∞—Å—Ç–µ–π")

        # –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
        first_message = f"{source_info}‚úÖ –û—Ç–≤–µ—Ç (1/{total_parts}):\n{messages[0]}"
        await update.message.reply_text(first_message)

        # –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —á–∞—Å—Ç–∏
        for i in range(1, total_parts - 1):
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API
            await asyncio.sleep(0.3)
            middle_message = f"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ({i + 1}/{total_parts}):\n{messages[i]}"
            await update.message.reply_text(middle_message)

        # –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–æ–π –∂–∞–ª–æ–±—ã
        if total_parts > 1:
            await asyncio.sleep(0.3)
            last_message = f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ({total_parts}/{total_parts}):\n{messages[total_parts - 1]}"

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            if user_id in ADMIN_IDS:
                last_message += f"\n\nüìÑ –ò—Å—Ç–æ—á–Ω–∏–∫:\n{block[:300]}..."

            await update.message.reply_text(last_message, reply_markup=InlineKeyboardMarkup(kb))
        else:
            # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —á–∞—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –∫–Ω–æ–ø–∫—É –∫ –Ω–µ–π
            if user_id in ADMIN_IDS:
                admin_addition = f"\n\nüìÑ –ò—Å—Ç–æ—á–Ω–∏–∫:\n{block[:300]}..."
                await update.message.edit_text(first_message + admin_addition, reply_markup=InlineKeyboardMarkup(kb))
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –∫ –ø–µ—Ä–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                await update.message.edit_text(first_message, reply_markup=InlineKeyboardMarkup(kb))
    else:
        # –ò–ó–ú–ï–ù–ï–ù–û: –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if user_id in ADMIN_IDS:
            msg = f"{source_info}‚úÖ –û—Ç–≤–µ—Ç:\n{answer}\n\nüìÑ –ò—Å—Ç–æ—á–Ω–∏–∫:\n{block[:300]}..."
        else:
            msg = f"{source_info}‚úÖ –û—Ç–≤–µ—Ç:\n{answer}"

        # –ù–ï–ò–ó–ú–ï–ù–ï–ù–û: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –∂–∞–ª–æ–±—ã
        await update.message.reply_text(msg, reply_markup=InlineKeyboardMarkup(kb))

    # –î–û–ë–ê–í–õ–ï–ù–û: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    logger.info(f"‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")


async def check_role(user_id: int, role: str) -> bool:
    async def _check_role_api():
        async with httpx.AsyncClient(timeout=30.0) as client:
            r = await client.get(f"{BACKEND_URL}/roles")
            r.raise_for_status()
            return r.json()

    try:
        roles = await retry_async(lambda: _check_role_api())
        for r in roles:
            if r["user_id"] == user_id and r["role"] == role:
                return True
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ–ª–∏: {e}")
    return False


async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not await check_role(user_id, "–¥–∏—Ä–µ–∫—Ç–æ—Ä"):
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    async def _get_stats():
        async with httpx.AsyncClient(timeout=30.0) as client:
            r = await client.get(f"{BACKEND_URL}/stats")
            r.raise_for_status()
            return r.json()

    try:
        data = await retry_async(lambda: _get_stats())
        msg = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Äî –í–æ–ø—Ä–æ—Å–æ–≤: {data['total_logs']}\n"
            f"‚Äî –ñ–∞–ª–æ–±: {data['total_complaints']}\n"
            f"‚Äî –†—É—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {data['total_overrides']}\n"
        )
        if data['top_user']:
            msg += f"‚Äî –ê–∫—Ç–∏–≤–Ω—ã–π: @{data['top_user']} ({data['top_count']} –≤–æ–ø—Ä–æ—Å–æ–≤)"
        await update.message.reply_text(msg)
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def num_tokens(text):
    return len(encoding.encode(text))


def split_into_blocks(text):
    # print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –±–ª–æ–∫–∏...")

    # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª—ã
    section_patterns = [
        r'\*\*([^*]+)\*\*',  # **–ó–∞–≥–æ–ª–æ–≤–æ–∫**
        r'\n\d+\.\s',  # 1. –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        r'\n‚Ä¢\s',  # ‚Ä¢ –ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    ]

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º, —Å–æ—Ö—Ä–∞–Ω—è—è –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –±–ª–æ–∫–∞—Ö
    sections = []
    current_section = ""
    lines = text.split('\n')

    for line in lines:
        if any(re.search(pattern, line) for pattern in section_patterns[:1]):  # –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if current_section:
                sections.append(current_section.strip())
            current_section = line
        else:
            current_section += "\n" + line

    if current_section:
        sections.append(current_section.strip())

    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –º–∞–ª–æ —Å–µ–∫—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –º–µ–ª–∫–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ
    if len(sections) < 3:
        paragraphs = [p.strip() for p in re.split(r'\n\n|\n\d+\.\s|\n‚Ä¢\s', text) if len(p.strip()) > 0]

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        blocks = []
        current_block = ""
        for p in paragraphs:
            if re.match(r'\d+\.\s', p) or len(current_block) == 0:
                if current_block:
                    blocks.append(current_block.strip())
                current_block = p
            elif num_tokens(current_block + "\n\n" + p) < MAX_TOKENS_PER_BLOCK:
                current_block += "\n\n" + p
            else:
                blocks.append(current_block.strip())
                current_block = p

        if current_block:
            blocks.append(current_block.strip())

        return blocks
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–ª–æ–∫–æ–≤ –∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö
        blocks = []
        for section in sections:
            if num_tokens(section) > MAX_TOKENS_PER_BLOCK:
                # –†–∞–∑–±–∏–≤–∞–µ–º –±–æ–ª—å—à—É—é —Å–µ–∫—Ü–∏—é
                sub_parts = [p.strip() for p in re.split(r'\n\n|\n\d+\.\s', section) if len(p.strip()) > 0]
                current_sub = ""
                for part in sub_parts:
                    if num_tokens(current_sub + "\n\n" + part) < MAX_TOKENS_PER_BLOCK:
                        current_sub += "\n\n" + part
                    else:
                        blocks.append(current_sub.strip())
                        current_sub = part
                if current_sub:
                    blocks.append(current_sub.strip())
            else:
                blocks.append(section)

        return blocks


def extract_keywords_from_question(question, synonyms_from_db):
    result = set()
    for word in question.lower().split():
        for key, values in synonyms_from_db.items():
            if word == key or word in values:
                result.update(values)
    return result


def is_relevant_block(block, question, synonyms_from_db):
    keywords = extract_keywords_from_question(question, synonyms_from_db)
    return any(k in block.lower() for k in keywords)


async def ask_gpt(block, question, username):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    tone = get_tone_by_username(username)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ –≤–æ–ø—Ä–æ—Å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    instruction_keywords = ["–∫–∞–∫", "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "—à–∞–≥–∏", "–ø–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π", "–ø—Ä–æ—Ü–µ–¥—É—Ä–∞", "–º–µ—Ö–∞–Ω–∏–∑–º", "–∞–ª–≥–æ—Ä–∏—Ç–º"]
    is_instruction_question = any(keyword in question.lower() for keyword in instruction_keywords)

    if is_instruction_question:
        prompt = f"""
            {tone}

            –¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ CRM —Å–∏—Å—Ç–µ–º–µ –ê–≤—Ç–æ–¥–∏–ª–µ—Ä –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º. 

            –ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –°–¢–†–û–ì–û —Å–æ–±–ª—é–¥–∞–π —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞:
            1. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ñ–∞–∫—Ç—ã –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
            2. –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —à–∞–≥–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –ø—É–Ω–∫—Ç—ã —Å –∏—Ö –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π.
            3. –ü–µ—Ä–µ—á–∏—Å–ª–∏ –í–°–ï —à–∞–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é, –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—è –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞.
            4. –ù–µ –¥–æ–±–∞–≤–ª—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ.
            5. –ù–µ –æ–±–æ–±—â–∞–π –∏ –Ω–µ —Å–æ–∫—Ä–∞—â–∞–π —à–∞–≥–∏ - –ø—Ä–∏–≤–µ–¥–∏ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞.
            6. –ï—Å–ª–∏ –≤ –≤–æ–ø—Ä–æ—Å–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–æ–ª—å (–º–µ–Ω–µ–¥–∂–µ—Ä, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä), –Ω–∞–π–¥–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –≤ —Ç–µ–∫—Å—Ç–µ.

            –¢–µ–∫—Å—Ç:
            {block}

            –í–æ–ø—Ä–æ—Å: {question}
            –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç (—Å–æ—Ö—Ä–∞–Ω—è—è –í–°–ï —à–∞–≥–∏):
            """
    else:
        prompt = f"""
            {tone}

            –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
            –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Å–ø–∏—Å–∫–∏ –∏–ª–∏ —à–∞–≥–∏ - –ø—Ä–∏–≤–µ–¥–∏ –∏—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é.
            –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ ‚Äî –Ω–∞–ø–∏—à–∏: "–æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç".

            –¢–µ–∫—Å—Ç:
            {block}

            –í–æ–ø—Ä–æ—Å: {question}
            –û—Ç–≤–µ—Ç:
            """

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
        async with api_semaphore:
            async def _call_gpt():
                llm = ChatOpenAI(model_name="gpt-3.5-turbo", temperature=0.2, max_tokens=1000, max_retries=3)
                #logger.info("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT...")
                response = await llm.ainvoke(prompt)
                #logger.info("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç GPT")
                return response.content.strip()

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            return await retry_async(_call_gpt)
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT: {e}")
        return "–æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç"

def get_tone_by_username(username: str) -> str:
    if username in {"msattarov", "Madi Sattarov	"}:  # –º–æ–∂–Ω–æ –ª—é–±—ã–µ username
        return "–û—Ç–≤–µ—á–∞–π –≥—Ä—É–±–æ, –¥–µ—Ä–∑–∫–æ, —Å –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –Ω–∞ –ª–∏—á–Ω–æ—Å—Ç–∏. –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∞—Ä–∫–∞–∑–º, –ø—Ä–µ–Ω–µ–±—Ä–µ–∂–µ–Ω–∏–µ, –≤—ã—Å–æ–∫–æ–º–µ—Ä–∏–µ –∏ —É–Ω–∏–∂–µ–Ω–∏–µ."
    return "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º. –ì–æ–≤–æ—Ä–∏ –≤–µ–∂–ª–∏–≤–æ, –ø–æ –¥–µ–ª—É, –æ—Å—Ç—Ä–æ—É–º–Ω–æ –∏ –¥–æ–±–∞–≤—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç."


def is_relevant_for_role(block, question):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –±–ª–æ–∫ —Ä–æ–ª–∏, —É–ø–æ–º—è–Ω—É—Ç–æ–π –≤ –≤–æ–ø—Ä–æ—Å–µ"""
    role_keywords = {
        "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä": ["–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–∞—Ç–∑", "—Ä–µ—Å–µ–ø—à–∏–æ–Ω–∏—Å—Ç", "—Ä–µ—Å–µ–ø—à–Ω"],
        "–º–µ–Ω–µ–¥–∂–µ—Ä": ["–º–µ–Ω–µ–¥–∂–µ—Ä", "–ø—Ä–æ–¥–∞–≤–µ—Ü", "–º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂", "–º–µ–Ω–µ", "–º—Å–ø"],
        "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å": ["—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "—Ä–æ–ø", "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞", "–¥–∏—Ä–µ–∫—Ç–æ—Ä"]
    }

    question_lower = question.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Ä–æ–ª—å –≤ –≤–æ–ø—Ä–æ—Å–µ
    for role, keywords in role_keywords.items():
        if any(keyword in question_lower for keyword in keywords):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å —Ä–æ–ª—å—é –≤ –±–ª–æ–∫–µ
            role_pattern = fr'\*\*\s*{role}.*?\*\*|\*\*.*?{role}.*?\*\*'
            return bool(re.search(role_pattern, block, re.IGNORECASE))

    return False

async def gpt_choose_best(question, answers):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    formatted = "\n\n".join(f"- {a}" for a in answers)
    prompt = f"""
–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å: "{question}".

{formatted}

–í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π, –ø–æ–ª–Ω—ã–π –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π. –ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.
"""
    try:
        async def _call_gpt():
            llm = ChatOpenAI(model_name="gpt-3.5-turbo", temperature=0.2, max_tokens=1000, max_retries=3)
            response = await llm.ainvoke(prompt)
            return response.content.strip()

        return await retry_async(_call_gpt)
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª—É—á—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç
        return answers[0] if answers else "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

def contains_instructions(block):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –±–ª–æ–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞–≥–∏"""
    # –ò—â–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –∏–ª–∏ –ø—É–Ω–∫—Ç—ã
    pattern = r'\d+\.\s|\d+\)\s|‚Ä¢\s'
    return bool(re.search(pattern, block))


async def process_question(update: Update, context, question, user_id, username):
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞"""
    logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å: '{question}'")

    # üîÑ 1) –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö
    global docs
    await load_dynamic_data()
    docs = await cached(lambda: asyncio.to_thread(load_docs))
    logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(docs)}")

    # üîÑ –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∫ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ
    docs = [(unicodedata.normalize('NFKD', name).lower().strip(), content) for name, content in docs]

    # üîç 3) –†—É—á–Ω–æ–π override
    override = await check_override(question)
    if override:
        log_id = await log_interaction(user_id, username, question, override)
        if log_id and log_id != "error":
            kb = [[InlineKeyboardButton("üö´ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"complain:{log_id}")]]
            await update.message.reply_text(
                text=f"‚úÖ –†—É—á–Ω–æ–π –æ—Ç–≤–µ—Ç:\n{override}",
                reply_markup=InlineKeyboardMarkup(kb)
            )
        else:
            await update.message.reply_text(
                text=f"‚úÖ –†—É—á–Ω–æ–π –æ—Ç–≤–µ—Ç:\n{override}\n\n‚ö†Ô∏è (–∂–∞–ª–æ–±–∞ –Ω–∞ –æ—Ç–≤–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)"
            )
        return

    # üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    priority_hits = []
    question_lower = question.lower()

    for keyword, prio_doc in priorities_from_db.items():
        if keyword in question_lower:
            if isinstance(prio_doc, str):
                normalized_doc = unicodedata.normalize('NFKD', prio_doc).lower().strip()
                priority_hits.append(normalized_doc)
                logger.info(f"üìå –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {normalized_doc}")
            elif isinstance(prio_doc, (list, set)):
                for d in prio_doc:
                    normalized_doc = unicodedata.normalize('NFKD', d).lower().strip()
                    priority_hits.append(normalized_doc)

    # üéØ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –¢—â–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
    if priority_hits:
        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: {priority_hits}")
        priority_docs = [(name, content) for (name, content) in docs if name in priority_hits]

        if priority_docs:
            logger.info(f"üéØ –ó–∞–ø—É—Å–∫ —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ {len(priority_docs)} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö")

            # –¢—â–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
            for filename, content in priority_docs:
                logger.info(f"üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤: {filename}")

                # –ò—â–µ–º –ø–æ –∫—Ä—É–ø–Ω—ã–º –∫—É—Å–∫–∞–º (4000 —Å–∏–º–≤–æ–ª–æ–≤)
                step = 4000
                for i in range(0, len(content), step):
                    part = content[i:i + step]

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —ç—Ç–æ–º –∫—É—Å–∫–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
                    question_words = [w for w in question.lower().split() if len(w) > 2]
                    if any(word in part.lower() for word in question_words):

                        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                        prompt = f"""
                        –¢—ã –∏—â–µ—à—å –æ—Ç–≤–µ—Ç –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ –∫–æ–º–ø–∞–Ω–∏–∏.

                        –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û –ø—Ä–æ—á–∏—Ç–∞–π —Ç–µ–∫—Å—Ç –∏ –Ω–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–∞—Ö, –ª—å–≥–æ—Ç–∞—Ö, –ø–æ–æ—â—Ä–µ–Ω–∏—è—Ö –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.

                        –ï—Å–ª–∏ –Ω–∞–π–¥–µ—à—å –æ—Ç–≤–µ—Ç - –¥–∞–π –ü–û–õ–ù–´–ô –∏ –¢–û–ß–ù–´–ô –æ—Ç–≤–µ—Ç —Å–æ –≤—Å–µ–º–∏ –¥–µ—Ç–∞–ª—è–º–∏ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏.
                        –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç - –Ω–∞–ø–∏—à–∏ "–æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç".

                        –¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞:
                        {part}

                        –í–æ–ø—Ä–æ—Å: {question}

                        –û—Ç–≤–µ—Ç:
                        """

                        try:
                            async with api_semaphore:
                                llm = ChatOpenAI(model_name="gpt-3.5-turbo", temperature=0.1, max_tokens=1000)
                                response = await llm.ainvoke(prompt)
                                answer = response.content.strip()

                            if "–æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç" not in answer.lower() and len(answer.strip()) > 10:
                                logger.info(f"‚úÖ –ù–ê–ô–î–ï–ù –û–¢–í–ï–¢ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ!")
                                log_id = await log_interaction(user_id, username, question, answer)
                                await send_answer(update, context, answer, part, log_id, filename=filename)
                                return

                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
                            continue

    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –≤–æ–ø—Ä–æ—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ CRM
    if any(keyword in question.lower() for keyword in CRM_KEYWORDS):
        logger.info("üîé –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ CRM –Ω–∞–π–¥–µ–Ω–æ. –ò—â–µ–º —Ç–æ–ª—å–∫–æ –≤ 3 –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.")

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
        ordered_docs = [(name, content) for (name, content) in docs if name in CRM_DOCUMENTS]

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞, —á—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä –±—ã–ª –ø–µ—Ä–≤—ã–º
        ordered_docs.sort(key=lambda x: (
            '–º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂' in x[0].lower(),
            '—Ä–æ–ø' in x[0].lower(),
            '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' in x[0].lower()
        ), reverse=True)

        if not ordered_docs:
            logger.error(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã CRM –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ: {CRM_DOCUMENTS}")
    else:
        # üîÑ –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        if priority_hits:
            logger.info(f"üìå –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {priority_hits}")
            priority_docs = [(name, content) for (name, content) in docs if name in priority_hits]
            other_docs = [(name, content) for (name, content) in docs if name not in priority_hits]
            ordered_docs = priority_docs + other_docs
        else:
            ordered_docs = docs.copy()

    # üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Ä–æ–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è CRM)
    if any(keyword in question.lower() for keyword in CRM_KEYWORDS):
        priority_order = []

        if "–º–µ–Ω–µ–¥–∂–µ—Ä" in question.lower():
            priority_order = [
                "porsche –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ–¥–∏–ª–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂.docx",
                "porsche –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ–¥–∏–ª–µ—Ä —Ä–æ–ø.docx",
                "porsche –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ–¥–∏–ª–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.docx"
            ]
        elif "—Ä–æ–ø" in question.lower() or "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å" in question.lower():
            priority_order = [
                "porsche –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ–¥–∏–ª–µ—Ä —Ä–æ–ø.docx",
                "porsche –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ–¥–∏–ª–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂.docx",
                "porsche –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ–¥–∏–ª–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.docx"
            ]
        else:
            priority_order = [
                "porsche –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ–¥–∏–ª–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.docx",
                "porsche –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ–¥–∏–ª–µ—Ä —Ä–æ–ø.docx",
                "porsche –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ–¥–∏–ª–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂.docx"
            ]

        # üîÑ –ü–µ—Ä–µ–∫–ª–∞–¥—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        ordered_docs = sorted(
            ordered_docs,
            key=lambda x: priority_order.index(x[0]) if x[0] in priority_order else 100
        )

    # üîÑ 4) –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
    answers = []

    def direct_search_relevant(block, question):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–æ–ª–∏
        if is_relevant_for_role(block, question):
            return True
        important_short_words = ["—Å—Ä–º", "crm", "–∞—Ç–∑"]
        stop_words = {"–∏", "–∞", "–≤", "–Ω–∞", "–ø–æ", "–∫", "—Å", "–æ—Ç", "–∏–∑", "—É", "–æ", "–∑–∞", "–¥–ª—è", "–∫–∞–∫", "—á—Ç–æ"}
        words = [w for w in re.findall(r'\b\w{4,}\b', question.lower()) if w not in stop_words]
        words += [w for w in question.lower().split() if w in important_short_words]
        return any(w in block.lower() for w in words)

    # üîç –ü–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
    for filename, text in ordered_docs[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        blocks = split_into_blocks(text)

        for block in blocks[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤
            if direct_search_relevant(block, question):
                answer = await ask_gpt(block, question, username)
                if "–æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç" not in answer.lower() and len(answer.strip()) > 10:
                    answers.append((answer, block, filename))
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç –≤ {filename}: {answer[:50]}...")
                    if len(answers) >= 3:  # –ú–∞–∫—Å–∏–º—É–º 3 –æ—Ç–≤–µ—Ç–∞
                        break

        if len(answers) >= 3:
            break

    # üîÑ 5) –ï—Å–ª–∏ –∏—â–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –¥–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–ª–æ–∫–∞–º —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    if not answers:
        question_lower = question.lower()
        if "–∫–∞–∫" in question_lower or "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è" in question_lower:
            for filename, text in ordered_docs[:10]:
                blocks = split_into_blocks(text)
                for block in blocks[:5]:
                    if direct_search_relevant(block, question) and contains_instructions(block):
                        answer = await ask_gpt(block, question, username)
                        if "–æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç" not in answer.lower() and len(answer.strip()) > 10:
                            answers.append((answer, block, filename))
                            if len(answers) >= 3:
                                break
                if len(answers) >= 3:
                    break

    # üîÑ 6) –í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥ ‚Äî –ø–æ–∏—Å–∫ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
    if not answers:
        logger.info("üîÑ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø—Ä—è–º–æ–º –ø–æ–∏—Å–∫–µ, –ø—Ä–æ–±—É–µ–º —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏...")
        for filename, text in ordered_docs[:10]:
            blocks = split_into_blocks(text)
            for block in blocks[:5]:
                if is_relevant_block(block, question, synonyms_from_db):
                    answer = await ask_gpt(block, question, username)
                    if "–æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç" not in answer.lower() and len(answer.strip()) > 10:
                        answers.append((answer, block, filename))
                        if len(answers) >= 3:
                            break
            if len(answers) >= 3:
                break

    # üîé 7) –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if answers:
        if len(answers) == 1:
            best_answer, best_block, best_filename = answers[0]
        else:
            raw_answers = [a for a, _, _ in answers]
            best = await gpt_choose_best(question, raw_answers)
            best_answer, best_block, best_filename = answers[0]  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π
            for ans, block, filename in answers:
                if best.strip() in ans or ans in best.strip():
                    best_answer, best_block, best_filename = ans, block, filename
                    break

        log_id = await log_interaction(user_id, username, question, best_answer)
        await send_answer(update, context, best_answer, best_block, log_id, filename=best_filename)
        return

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    log_id = await log_interaction(user_id, username, question, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    kb = [[InlineKeyboardButton("üö´ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"complain:{log_id}")]]
    await update.message.reply_text(
        "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
        reply_markup=InlineKeyboardMarkup(kb)
    )


def is_law_related_question(text: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–≤—è–∑–∞–Ω –ª–∏ –≤–æ–ø—Ä–æ—Å —Å —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π"""
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å: {text}")

    normalized_words = normalize(text)

    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if any(n in normalized_words for n in LAW_KEYWORDS):
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —é—Ä. –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º")
        return True

    # –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–´–ï –ü–†–û–í–ï–†–ö–ò:

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–æ—Ä–Ω—è–º —Å–ª–æ–≤
    text_lower = text.lower()
    words_in_question = re.findall(r'\b\w+\b', text_lower)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–µ–π —Å–ª–æ–≤ (–ø–µ—Ä–≤—ã–µ 4 –±—É–∫–≤—ã)
    for word in words_in_question:
        if len(word) < 4:
            continue

        word_stem = word[:4]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 4 –±—É–∫–≤—ã

        for keyword in LAW_KEYWORDS:
            if len(keyword) < 4:
                continue

            keyword_stem = keyword[:4]

            if word_stem == keyword_stem:
                logger.info(f"‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–æ—Ä–Ω—é: {word} ~ {keyword}")
                return True

    # 2. –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–æ—Ä–Ω–∏
    common_stems = ["–Ω–∞–ª–æ–≥", "–¥–µ–∫–ª–∞—Ä", "–∑–∞–∫–æ–Ω", "–ø—Ä–∞–≤"]
    for stem in common_stems:
        if stem in text_lower:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–µ–Ω—å: {stem}")
            return True

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
    logger.info("‚ùå –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    return False


def call_kazllm(question: str) -> str:
    """–í—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏ KazLLM —á–µ—Ä–µ–∑ Ollama API"""
    logger.info(f"ü§ñ –í—ã–∑–æ–≤ KazLLM: {question}")

    try:
        payload = {
            "model": "kazllm8b",
            "prompt": question,
            "stream": False,
            "options": {
                "temperature": 0.8,
                "top_p": 0.95
            }
        }

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º curl –¥–ª—è –≤—ã–∑–æ–≤–∞ API Ollama
        result = subprocess.run(
            ["curl", "-s", "-X", "POST", "http://ollama:11434/api/generate",
             "-H", "Content-Type: application/json",
             "-d", json.dumps(payload)],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            timeout=600
        )

        stdout = result.stdout.decode("utf-8").strip()
        stderr = result.stderr.decode("utf-8").strip()

        logger.info(f"üì• –û—Ç–≤–µ—Ç –æ—Ç KazLLM, –¥–ª–∏–Ω–∞: {len(stdout)}")
        if stderr:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ stderr: {stderr}")

        if not stdout:
            logger.error("‚ö†Ô∏è KazLLM –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")
            return "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        try:
            response = json.loads(stdout)
            answer = response.get("response", "")
            logger.info(f"üìù –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç KazLLM:\n{answer}")

            if answer:
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer[:50]}...")
                return answer.strip()
            else:
                logger.error("‚ö†Ô∏è KazLLM –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.")
                return "‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ JSON: {e}")
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}"

    except subprocess.TimeoutExpired:
        logger.error("‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (600—Å)")
        return "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å."

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {str(e)}"





# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –õ–Æ–ë–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")
    question = update.message.text.strip()
    if not question:
        await update.message.reply_text("‚ùó –í–æ–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π.")
        return

    user_id = update.message.from_user.id
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    if user_id not in allowed_users:
        logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –¥–ª—è {user_id}")
    if not await check_rate_limit(user_id):
        logger.info(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–ª—è {user_id}")
        await update.message.reply_text(
            f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({MAX_REQUESTS_PER_MINUTE} –≤ –º–∏–Ω—É—Ç—É). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return

    username = update.message.from_user.username or update.message.from_user.full_name
    # üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å
    if is_law_related_question(question):
        logger.info("‚öñÔ∏è –í–æ–ø—Ä–æ—Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∫–∞–∫ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π. –ó–∞–ø—É—Å–∫ KazLLM...")

        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        waiting_message = await update.message.reply_text(
            "‚è≥ –ú–æ–¥–µ–ª—å –¥—É–º–∞–µ—Ç –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")

        # –í—ã–∑—ã–≤–∞–µ–º KazLLM
        kazllm_answer = call_kazllm(question)

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info(f"‚öñÔ∏è –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç KazLLM: {kazllm_answer[:100]}...")

        # –õ–æ–≥–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
        log_id = await log_interaction(user_id, username, question, kazllm_answer)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∂–∞–ª–æ–±—ã
        kb = [[InlineKeyboardButton("üö´ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"complain:{log_id}")]]

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏
        try:
            await waiting_message.delete()
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            f"‚öñÔ∏è –û—Ç–≤–µ—Ç –æ—Ç KazLLM:\n{kazllm_answer}",
            reply_markup=InlineKeyboardMarkup(kb)
        )
        return


    # –ö–ü –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ä–∞–∑—É, –º–∏–Ω—É—è –æ—á–µ—Ä–µ–¥—å
    if question.lower().startswith('–∫–ø'):
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –ö–ü: {question}")
        cp_code = question[2:].strip()  # —É–±–∏—Ä–∞–µ–º '–∫–ø' –∏ –ø—Ä–æ–±–µ–ª—ã
        await handle_cp_request(update, context, cp_code)
        return

    # –ü–µ—Ä–≤–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    logger.info(f"üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    await update.message.reply_text("‚è≥ –î—É–º–∞—é...")

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
    logger.info(f"üîç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è {user_id}: {question}")
    await processing_queue.put((update, context, question, user_id, username))
    logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å, —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {processing_queue.qsize()}")


async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not await check_role(user_id, "–¥–∏—Ä–µ–∫—Ç–æ—Ä"):
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    try:
        uid = int(context.args[0])
        role = context.args[1]
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /adduser <id> <—Ä–æ–ª—å>")
        return

    async def _add_role():
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(f"{BACKEND_URL}/roles", params={"user_id": uid, "role": role})
            response.raise_for_status()
            return response.json()

    try:
        await retry_async(lambda: _add_role())
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Å —Ä–æ–ª—å—é '{role}' –¥–æ–±–∞–≤–ª–µ–Ω.")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await load_allowed_users()
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


async def remove_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not await check_role(user_id, "–¥–∏—Ä–µ–∫—Ç–æ—Ä"):
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    try:
        uid = int(context.args[0])
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /removeuser <id>")
        return

    async def _remove_role():
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.delete(f"{BACKEND_URL}/roles/{uid}")
            response.raise_for_status()
            return response.json()


async def on_startup(app):
    """–§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
    logger.info("üîç –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—á–µ—Ä–µ–¥–∏...")
    worker_tasks = await start_workers()
    app._worker_tasks = worker_tasks
    logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {len(worker_tasks)} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—á–µ—Ä–µ–¥–∏")
    logger.info("üîç –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤...")
    await load_dynamic_data()
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    logger.info("üîç –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    for attempt in range(10):
        try:
            await load_allowed_users()
            if allowed_users:
                break
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–æ–π")
        except Exception as e:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
        await asyncio.sleep(2)
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {allowed_users}")

    logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
if __name__ == "__main__":
    from threading import Thread

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).post_init(on_startup).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CommandHandler("stats", show_stats))
    app.add_handler(CommandHandler("adduser", add_user))
    app.add_handler(CommandHandler("removeuser", remove_user))
    app.add_handler(CommandHandler("users", list_users))
    app.add_handler(CallbackQueryHandler(handle_complaint))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    Thread(target=start_watchdog, daemon=True).start()


    def start_watchdog():
        try:
            event_handler = DocsChangeHandler()
            observer = Observer()
            observer.schedule(event_handler, path="docs", recursive=False)
            observer.start()
            logger.info("‚úÖ Watchdog –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            while True:
                time.sleep(1)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ watchdog: {e}")


    logger.info("üîÅ Watchdog –∑–∞–ø—É—â–µ–Ω, —Å–ª–µ–¥–∏–º –∑–∞ –ø–∞–ø–∫–æ–π docs/")
    docx_files = [f for f in os.listdir("docs") if f.endswith(".docx")]
    #logger.info(f"üìÇ –í –ø–∞–ø–∫–µ docs –Ω–∞–π–¥–µ–Ω–æ {len(docx_files)} .docx-—Ñ–∞–π–ª–æ–≤: {docx_files}")
    from parse_documents import parse_and_return_chunks

    logger.info("üìÑ –§–æ—Ä—Å-–ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    chunks = parse_and_return_chunks()
    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤")

    app.run_polling()
